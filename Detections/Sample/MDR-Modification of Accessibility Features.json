{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     },
                       "analytic-id":  {
                                           "type":  "string",
                                           "defaultValue":  "cff737fe-66ae-4867-a0f5-1759ffb1ce76",
                                           "minLength":  1,
                                           "metadata":  {
                                                            "description":  "Unique id for the scheduled alert rule"
                                                        }
                                       }
                   },
    "resources":  [
                      {
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/\u0027,parameters(\u0027analytic-id\u0027))]",
                          "apiVersion":  "2020-01-01",
                          "kind":  "Scheduled",
                          "location":  "[resourceGroup().location]",
                          "properties":  {
                                             "description":  "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\nTwo common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. [1]\nRef: https://attack.mitre.org/techniques/T1546/008/",
                                             "displayName":  "MDR-Modification of Accessibility Features",
                                             "enabled":  false,
                                             "query":  "let ImagesList = dynamic ([\"sethc.exe\",\"utilman2.exe\",\"osk.exe\",\"Magnify.exe\",\"Narrator.exe\",\"DisplaySwitch.exe\",\"AtBroker.exe\"]); \nlet OriginalFileNameList = dynamic ([\"sethc.exe\",\"utilman.exe\",\"osk.exe\",\"Magnify.exe\",\"Narrator.exe\",\"DisplaySwitch.exe\",\"AtBroker.exe\",\"SR.exe\",\"utilman2.exe\",\"ScreenMagnifier.exe\"]); \nEvent\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * \u0027ProcessId\"\u003e\u0027 ProcessId \"\u003c\" * \u0027Image\"\u003e\u0027 Image \"\u003c\" * \u0027OriginalFileName\"\u003e\u0027 OriginalFileName \"\u003c\" *\n| where Image has_any (ImagesList) and not (OriginalFileName has_any (OriginalFileNameList))\n| parse EventData with * \u0027ProcessGuid\"\u003e\u0027 ProcessGuid \"\u003c\" * \u0027Description\"\u003e\u0027 Description \"\u003c\" * \u0027CommandLine\"\u003e\u0027 CommandLine \"\u003c\" * \u0027CurrentDirectory\"\u003e\u0027 CurrentDirectory \"\u003c\" * \u0027User\"\u003e\u0027 User \"\u003c\" * \u0027LogonGuid\"\u003e\u0027 LogonGuid \"\u003c\" * \u0027Hashes\"\u003e\u0027 Hashes \"\u003c\" * \u0027ParentProcessGuid\"\u003e\u0027 ParentProcessGuid \"\u003c\" * \u0027ParentImage\"\u003e\u0027 ParentImage \"\u003c\" * \u0027ParentCommandLine\"\u003e\u0027 ParentCommandLine \"\u003c\" * \u0027ParentUser\"\u003e\u0027 ParentUser \"\u003c\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessId, ProcessGuid, CommandLine, Description, OriginalFileName, CurrentDirectory, Hashes\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, \u0027.\u0027))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(User, \"\\\\\")[1]), AccountNTDomain = tostring(split(User, \"\\\\\")[0])\n| extend ImageFileName = tostring(split(Image, \"\\\\\")[-1])\n| extend ImageDirectory = replace_string(Image, ImageFileName, \"\")\n| project-away DomainIndex\n",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "PT1H",
                                             "severity":  "Medium",
                                             "suppressionDuration":  "PT1H",
                                             "suppressionEnabled":  false,
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "tactics":  [
                                                             "Persistence"
                                                         ]
                                         }
                      }
                  ]
}
