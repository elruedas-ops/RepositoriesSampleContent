{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      },
      "rule-name": {
        "type": "string",
        "defaultValue": "EX-BRU-[AZU][EID] Password spraying activity"
      },
      "analytic-id": {
        "type": "string",
        "defaultValue": "[guid(parameters('workspace'),parameters('rule-name'))]",
        "minLength": 1,
        "metadata": {
          "description": "Unique id for the scheduled alert rule"
        }
      }
    },
    "resources": [
      {
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/',parameters('analytic-id'))]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic-id'))]",
        "apiVersion": "2020-01-01",
        "kind": "Scheduled",
        "location": "[resourceGroup().location]",
        "properties": {
                "displayName": "[concat(parameters('rule-name'),' ',parameters('analytic-id'))]",
                "description": "¿Qué queremos detectar? - Número elevado de logins fallidos desde una misma IP de origen con usuarios distintos en Azure AD\n¿Cómo lo queremos detectar? - Monitorizando eventos que contengan logins fallidos para distintos usuarios, pero provenientes desde una misma IP de origen en un corto período de tiempo.\n¿Porqué lo queremos detectar? -Un atacante podría intentar acceder al Azure AD de la organización con unas credenciales válidas (o de diccionario) y probar con multitud de nombres de usuario por si alguno tiene establecida dicha contraseña.",
                "severity": "Low",
                "enabled": true,
                "query": "let timeRange = 3d;\r\n        let lookBack = 7d;\r\n        let authenticationWindow = 20m;\r\n        let authenticationThreshold = 10;\r\n        let isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\r\n        let failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\r\n        let successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\r\n        // Lookup up resolved identities from last 7 days\r\n        let aadFunc = (tableName:string){\r\n        let identityLookup = table(tableName)\r\n        | where TimeGenerated >= ago(lookBack)\r\n        | where not(Identity matches regex isGUID)\r\n        | where isnotempty(UserId)\r\n        | summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName, Type;\r\n        // collect window threshold breaches\r\n        table(tableName)\r\n        | where TimeGenerated > ago(timeRange)\r\n        | where ResultType in(failureCodes)\r\n        | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName, Type\r\n        | summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, Type\r\n        | where FailedPrincipalCount >= authenticationThreshold\r\n        | summarize WindowThresholdBreaches = count() by IPAddress, Type\r\n        | join kind= inner (\r\n        // where we breached a threshold, join the details back on all failure data\r\n        table(tableName)\r\n        | where TimeGenerated > ago(timeRange)\r\n        | where ResultType in(failureCodes)\r\n        | extend LocationDetails = todynamic(LocationDetails)\r\n        | extend FullLocation = strcat(LocationDetails.countryOrRegion,'|', LocationDetails.state, '|', LocationDetails.city)\r\n        | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId, Type\r\n        // lookup any unresolved identities\r\n        | extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\r\n        | join kind= leftouter (\r\n         identityLookup\r\n        ) on $left.UnresolvedUserId==$right.UserId\r\n        | extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\r\n        | extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\r\n        | summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName, Type\r\n        | extend FailedPrincipalCount = arraylength(set_UserPrincipalName)\r\n        ) on IPAddress\r\n        | project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches, Type\r\n        | join kind= inner (\r\n        table(tableName) // get data on success vs. failure history for each IP\r\n        | where TimeGenerated > ago(timeRange)\r\n        | where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\r\n        | where Location in (\"CN\", \"TW\", \"VN\", \"LT\", \"KR\", \"KP\", \"AE\", \"RU\", \"IR\", \"PK\", \"LR\", \"LY\", \"NE\", \"SL\", \"SO\" ,\"NG\")\r\n        | summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress, Type\r\n        | where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\r\n        ) on IPAddress\r\n        | project-away IPAddress1\r\n        | extend timestamp=StartTime, IPCustomEntity = IPAddress\r\n        };\r\n        let aadSignin = aadFunc(\"SigninLogs\");\r\n        let aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\r\n        union isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1110"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P1D",
                        "matchingMethod": "Selected",
                        "groupByEntities": [
                            "IP"
                        ],
                        "groupByAlertDetails": [
                            "DisplayName"
                        ],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "Geolocation": "Locations"
                },
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "UserPrincipalNames"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
                 
              }
          }
    ]
  }
