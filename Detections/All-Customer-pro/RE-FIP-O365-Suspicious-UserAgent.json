{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      },
      "rule-name": {
        "type": "string",
        "defaultValue": "RE-FIP-[O365] Suspicious UserAgent​"

      },
      "analytic-id": {
        "type": "string",
        "defaultValue": "[guid(parameters('workspace'),parameters('rule-name'))]",
        "minLength": 1,
        "metadata": {
          "description": "Unique id for the scheduled alert rule"
        }
      }
    },
    "resources": [
      {
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/',parameters('analytic-id'))]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic-id'))]",
        "apiVersion": "2020-01-01",
        "kind": "Scheduled",
        "location": "[resourceGroup().location]",
        "properties": {
                "displayName": "[concat(parameters('rule-name'),' ',parameters('analytic-id'))]",
                "description": "¿Qué queremos detectar? - Intentos de comunicación hacia recursos internos mediante un UserAgent sospechoso\n¿Cómo lo queremos detectar? - Monitorizando nombres de UserAgent de herramientas conocidas utilizadas para hacking|n¿Por qué lo queremos detectar? - Un atacante puede utilizar estas herramientas para acceder a aplicativos internos de la organización y realizar acciones maliciosas sobre ellos",
                "severity": "Medium",
                "enabled": true,
                "query": "let endtime = 1d;\n(union isfuzzy=true\n(OfficeActivity | where TimeGenerated >= ago(endtime) | where UserAgent != \"\"),\n(OfficeActivity\n| where TimeGenerated >= ago(endtime)\n| where RecordType in (\"AzureActiveDirectory\", \"AzureActiveDirectoryStsLogon\")\n| extend OperationName = Operation\n| parse ExtendedProperties with * 'User-Agent\\\\\":\\\\\"' UserAgent2 '\\\\' *\n| parse ExtendedProperties with * 'UserAgent\", \"Value\": \"' UserAgent1 '\"' *\n| where isnotempty(UserAgent1) or isnotempty(UserAgent2)\n| extend UserAgent = iff( RecordType == 'AzureActiveDirectoryStsLogon', UserAgent1, UserAgent2)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, RecordType, Operation\n),\n( OfficeActivity\n| where UserAgent contains \"Nikto\" or UserAgent contains \"Sublist\" or UserAgent contains \"Dirb\" or UserAgent contains \"Harvester\" or UserAgent contains \"nikto\" or UserAgent contains \"sublist\" or UserAgent contains \"dirb\" or UserAgent contains \"harvester\" or UserAgent contains \"Iceweasel\" or UserAgent contains \"iceweasel\" or UserAgent contains \"meterpreter\" or UserAgent contains \"Meterpreter\" or UserAgent contains \"WinHttp\" or UserAgent contains \"winHttp\" or UserAgent contains \"winhttp\"\n),\n( SigninLogs\n| where UserAgent contains \"Nikto\" or UserAgent contains \"Sublist\" or UserAgent contains \"Dirb\" or UserAgent contains \"Harvester\" or UserAgent contains \"nikto\" or UserAgent contains \"sublist\" or UserAgent contains \"dirb\" or UserAgent contains \"harvester\" or UserAgent contains \"Iceweasel\" or UserAgent contains \"iceweasel\" or UserAgent contains \"meterpreter\" or UserAgent contains \"Meterpreter\" or UserAgent contains \"WinHttp\" or UserAgent contains \"winHttp\" or UserAgent contains \"winhttp\"\n| summarize by UserAgent, Resource, ResourceGroup)\n,\n(SigninLogs\n| where TimeGenerated >= ago(endtime)\n| where isnotempty(UserAgent)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by\nUserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, OperationName,\ntostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n)) // Likely artefact of hardcoding\n| where UserAgent startswith \"User\" or UserAgent startswith '\\\"' // Incorrect casing\nor (UserAgent startswith \"Mozilla\" and not(UserAgent containscs \"Mozilla\")) // Incorrect casing\nor UserAgent containscs \"(Compatible;\" // Missing MSIE version\nor UserAgent matches regex @\"MSIE\\s?;\" // Incorrect spacing around MSIE version\nor UserAgent matches regex @\"MSIE(?:\\d|.{1,5}?\\d\\s;)\"\n| extend timestamp = StartTime, IPCustomEntity = SourceIP, AccountCustomEntity = Account\n",
                "queryFrequency": "PT15M",
                "queryPeriod": "PT16M",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CommandAndControl"
                ],
                "techniques": [
                    "T1437"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P1D",
                        "matchingMethod": "Selected",
                        "groupByEntities": [
                            "IP"
                        ],
                        "groupByAlertDetails": [
                            "DisplayName"
                        ],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "UserId"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "ClientIP"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
                 
              }
          }
    ]
  }